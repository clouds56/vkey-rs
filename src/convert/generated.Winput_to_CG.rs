// This file is auto-generated. Do not edit manually.


pub fn vk_to_cgkeycode(value: Vk) -> Option<CGKeyCode> {
  let result = match value {
    Vk::VolumeMute   => KeyCode::MUTE                      .into_::<CGKeyCode>(),
    Vk::VolumeDown   => KeyCode::VOLUME_DOWN               .into_::<CGKeyCode>(),
    Vk::VolumeUp     => KeyCode::VOLUME_UP                 .into_::<CGKeyCode>(),
    Vk::_0           => KeyCodeExt::kVK_ANSI_0             .into_::<CGKeyCode>(),
    Vk::_1           => KeyCodeExt::kVK_ANSI_1             .into_::<CGKeyCode>(),
    Vk::_2           => KeyCodeExt::kVK_ANSI_2             .into_::<CGKeyCode>(),
    Vk::_3           => KeyCodeExt::kVK_ANSI_3             .into_::<CGKeyCode>(),
    Vk::_4           => KeyCodeExt::kVK_ANSI_4             .into_::<CGKeyCode>(),
    Vk::_5           => KeyCodeExt::kVK_ANSI_5             .into_::<CGKeyCode>(),
    Vk::_6           => KeyCodeExt::kVK_ANSI_6             .into_::<CGKeyCode>(),
    Vk::_7           => KeyCodeExt::kVK_ANSI_7             .into_::<CGKeyCode>(),
    Vk::_8           => KeyCodeExt::kVK_ANSI_8             .into_::<CGKeyCode>(),
    Vk::_9           => KeyCodeExt::kVK_ANSI_9             .into_::<CGKeyCode>(),
    Vk::A            => KeyCodeExt::kVK_ANSI_A             .into_::<CGKeyCode>(),
    Vk::B            => KeyCodeExt::kVK_ANSI_B             .into_::<CGKeyCode>(),
    Vk::C            => KeyCodeExt::kVK_ANSI_C             .into_::<CGKeyCode>(),
    Vk::CapsLock     => KeyCode::CAPS_LOCK                 .into_::<CGKeyCode>(),
    Vk::D            => KeyCodeExt::kVK_ANSI_D             .into_::<CGKeyCode>(),
    Vk::Backspace    => KeyCode::DELETE                    .into_::<CGKeyCode>(),
    Vk::Delete       => KeyCode::FORWARD_DELETE            .into_::<CGKeyCode>(),
    Vk::DownArrow    => KeyCode::DOWN_ARROW                .into_::<CGKeyCode>(),
    Vk::E            => KeyCodeExt::kVK_ANSI_E             .into_::<CGKeyCode>(),
    Vk::End          => KeyCode::END                       .into_::<CGKeyCode>(),
    Vk::Escape       => KeyCode::ESCAPE                    .into_::<CGKeyCode>(),
    Vk::F            => KeyCodeExt::kVK_ANSI_F             .into_::<CGKeyCode>(),
    Vk::F1           => KeyCode::F1                        .into_::<CGKeyCode>(),
    Vk::F10          => KeyCode::F10                       .into_::<CGKeyCode>(),
    Vk::F11          => KeyCode::F11                       .into_::<CGKeyCode>(),
    Vk::F12          => KeyCode::F12                       .into_::<CGKeyCode>(),
    Vk::F13          => KeyCode::F13                       .into_::<CGKeyCode>(),
    Vk::F14          => KeyCode::F14                       .into_::<CGKeyCode>(),
    Vk::F15          => KeyCode::F15                       .into_::<CGKeyCode>(),
    Vk::F16          => KeyCode::F16                       .into_::<CGKeyCode>(),
    Vk::F17          => KeyCode::F17                       .into_::<CGKeyCode>(),
    Vk::F18          => KeyCode::F18                       .into_::<CGKeyCode>(),
    Vk::F19          => KeyCode::F19                       .into_::<CGKeyCode>(),
    Vk::F2           => KeyCode::F2                        .into_::<CGKeyCode>(),
    Vk::F20          => KeyCode::F20                       .into_::<CGKeyCode>(),
    Vk::F3           => KeyCode::F3                        .into_::<CGKeyCode>(),
    Vk::F4           => KeyCode::F4                        .into_::<CGKeyCode>(),
    Vk::F5           => KeyCode::F5                        .into_::<CGKeyCode>(),
    Vk::F6           => KeyCode::F6                        .into_::<CGKeyCode>(),
    Vk::F7           => KeyCode::F7                        .into_::<CGKeyCode>(),
    Vk::F8           => KeyCode::F8                        .into_::<CGKeyCode>(),
    Vk::F9           => KeyCode::F9                        .into_::<CGKeyCode>(),
    Vk::G            => KeyCodeExt::kVK_ANSI_G             .into_::<CGKeyCode>(),
    Vk::H            => KeyCodeExt::kVK_ANSI_H             .into_::<CGKeyCode>(),
    Vk::Help         => KeyCode::HELP                      .into_::<CGKeyCode>(),
    Vk::Home         => KeyCode::HOME                      .into_::<CGKeyCode>(),
    Vk::I            => KeyCodeExt::kVK_ANSI_I             .into_::<CGKeyCode>(),
    Vk::J            => KeyCodeExt::kVK_ANSI_J             .into_::<CGKeyCode>(),
    Vk::K            => KeyCodeExt::kVK_ANSI_K             .into_::<CGKeyCode>(),
    Vk::L            => KeyCodeExt::kVK_ANSI_L             .into_::<CGKeyCode>(),
    Vk::Alt          => KeyCode::OPTION                    .into_::<CGKeyCode>(),
    Vk::LeftArrow    => KeyCode::LEFT_ARROW                .into_::<CGKeyCode>(),
    Vk::Control      => KeyCode::CONTROL                   .into_::<CGKeyCode>(),
    Vk::LeftControl  => KeyCode::CONTROL                   .into_::<CGKeyCode>(),
    Vk::LeftShift    => KeyCode::SHIFT                     .into_::<CGKeyCode>(),
    Vk::Shift        => KeyCode::SHIFT                     .into_::<CGKeyCode>(),
    Vk::M            => KeyCodeExt::kVK_ANSI_M             .into_::<CGKeyCode>(),
    Vk::N            => KeyCodeExt::kVK_ANSI_N             .into_::<CGKeyCode>(),
    Vk::O            => KeyCodeExt::kVK_ANSI_O             .into_::<CGKeyCode>(),
    Vk::P            => KeyCodeExt::kVK_ANSI_P             .into_::<CGKeyCode>(),
    Vk::PageDown     => KeyCode::PAGE_DOWN                 .into_::<CGKeyCode>(),
    Vk::PageUp       => KeyCode::PAGE_UP                   .into_::<CGKeyCode>(),
    Vk::Q            => KeyCodeExt::kVK_ANSI_Q             .into_::<CGKeyCode>(),
    Vk::R            => KeyCodeExt::kVK_ANSI_R             .into_::<CGKeyCode>(),
    Vk::Enter        => KeyCode::RETURN                    .into_::<CGKeyCode>(),
    Vk::RightArrow   => KeyCode::RIGHT_ARROW               .into_::<CGKeyCode>(),
    Vk::RightControl => KeyCode::RIGHT_CONTROL             .into_::<CGKeyCode>(),
    Vk::RightShift   => KeyCode::RIGHT_SHIFT               .into_::<CGKeyCode>(),
    Vk::S            => KeyCodeExt::kVK_ANSI_S             .into_::<CGKeyCode>(),
    Vk::Space        => KeyCode::SPACE                     .into_::<CGKeyCode>(),
    Vk::T            => KeyCodeExt::kVK_ANSI_T             .into_::<CGKeyCode>(),
    Vk::Tab          => KeyCode::TAB                       .into_::<CGKeyCode>(),
    Vk::U            => KeyCodeExt::kVK_ANSI_U             .into_::<CGKeyCode>(),
    Vk::UpArrow      => KeyCode::UP_ARROW                  .into_::<CGKeyCode>(),
    Vk::V            => KeyCodeExt::kVK_ANSI_V             .into_::<CGKeyCode>(),
    Vk::W            => KeyCodeExt::kVK_ANSI_W             .into_::<CGKeyCode>(),
    Vk::X            => KeyCodeExt::kVK_ANSI_X             .into_::<CGKeyCode>(),
    Vk::Y            => KeyCodeExt::kVK_ANSI_Y             .into_::<CGKeyCode>(),
    Vk::Z            => KeyCodeExt::kVK_ANSI_Z             .into_::<CGKeyCode>(),
    Vk::Numpad0      => KeyCodeExt::kVK_ANSI_Keypad0       .into_::<CGKeyCode>(),
    Vk::Numpad1      => KeyCodeExt::kVK_ANSI_Keypad1       .into_::<CGKeyCode>(),
    Vk::Numpad2      => KeyCodeExt::kVK_ANSI_Keypad2       .into_::<CGKeyCode>(),
    Vk::Numpad3      => KeyCodeExt::kVK_ANSI_Keypad3       .into_::<CGKeyCode>(),
    Vk::Numpad4      => KeyCodeExt::kVK_ANSI_Keypad4       .into_::<CGKeyCode>(),
    Vk::Numpad5      => KeyCodeExt::kVK_ANSI_Keypad5       .into_::<CGKeyCode>(),
    Vk::Numpad6      => KeyCodeExt::kVK_ANSI_Keypad6       .into_::<CGKeyCode>(),
    Vk::Numpad7      => KeyCodeExt::kVK_ANSI_Keypad7       .into_::<CGKeyCode>(),
    Vk::Numpad8      => KeyCodeExt::kVK_ANSI_Keypad8       .into_::<CGKeyCode>(),
    Vk::Numpad9      => KeyCodeExt::kVK_ANSI_Keypad9       .into_::<CGKeyCode>(),
    Vk::Subtract     => KeyCodeExt::kVK_ANSI_KeypadMinus   .into_::<CGKeyCode>(),
    Vk::Divide       => KeyCodeExt::kVK_ANSI_KeypadDivide  .into_::<CGKeyCode>(),
    Vk::Decimal      => KeyCodeExt::kVK_ANSI_KeypadDecimal .into_::<CGKeyCode>(),
    Vk::Add          => KeyCodeExt::kVK_ANSI_KeypadPlus    .into_::<CGKeyCode>(),
    Vk::Multiply     => KeyCodeExt::kVK_ANSI_KeypadMultiply.into_::<CGKeyCode>(),
    _ => return None,
  };
  Some(result)
}

impl crate::convert::Convert<Vk, CGKeyCode> for crate::convert::Converter {
  fn convert(value: Vk) -> Option<CGKeyCode> {
    vk_to_cgkeycode(value)
  }
}
