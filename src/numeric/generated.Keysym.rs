// This file is auto-generated. Do not edit manually.


pub fn keysym_to_u32(value: &Keysym) -> u32 {
  #[allow(unused_parens)]
  const {
    assert!((&{Keysym::XF86_AudioMute       }).raw() == 0x1008FF12);
    assert!((&{Keysym::XF86_AudioPlay       }).raw() == 0x1008FF14);
    assert!((&{Keysym::XF86_AudioNext       }).raw() == 0x1008FF17);
    assert!((&{Keysym::XF86_AudioPrev       }).raw() == 0x1008FF16);
    assert!((&{Keysym::XF86_AudioStop       }).raw() == 0x1008FF15);
    assert!((&{Keysym::XF86_AudioLowerVolume}).raw() == 0x1008FF11);
    assert!((&{Keysym::XF86_AudioRaiseVolume}).raw() == 0x1008FF13);
    assert!((&{Keysym::_0                   }).raw() == 0x30);
    assert!((&{Keysym::_1                   }).raw() == 0x31);
    assert!((&{Keysym::_2                   }).raw() == 0x32);
    assert!((&{Keysym::_3                   }).raw() == 0x33);
    assert!((&{Keysym::_4                   }).raw() == 0x34);
    assert!((&{Keysym::_5                   }).raw() == 0x35);
    assert!((&{Keysym::_6                   }).raw() == 0x36);
    assert!((&{Keysym::_7                   }).raw() == 0x37);
    assert!((&{Keysym::_8                   }).raw() == 0x38);
    assert!((&{Keysym::_9                   }).raw() == 0x39);
    assert!((&{Keysym::A                    }).raw() == 0x41);
    assert!((&{Keysym::B                    }).raw() == 0x42);
    assert!((&{Keysym::C                    }).raw() == 0x43);
    assert!((&{Keysym::Cancel               }).raw() == 0xFF69);
    assert!((&{Keysym::Caps_Lock            }).raw() == 0xFFE5);
    assert!((&{Keysym::Clear                }).raw() == 0xFF0B);
    assert!((&{Keysym::D                    }).raw() == 0x44);
    assert!((&{Keysym::BackSpace            }).raw() == 0xFF08);
    assert!((&{Keysym::Delete               }).raw() == 0xFFFF);
    assert!((&{Keysym::Down                 }).raw() == 0xFF54);
    assert!((&{Keysym::E                    }).raw() == 0x45);
    assert!((&{Keysym::End                  }).raw() == 0xFF57);
    assert!((&{Keysym::Escape               }).raw() == 0xFF1B);
    assert!((&{Keysym::Execute              }).raw() == 0xFF62);
    assert!((&{Keysym::F                    }).raw() == 0x46);
    assert!((&{Keysym::F1                   }).raw() == 0xFFBE);
    assert!((&{Keysym::F10                  }).raw() == 0xFFC7);
    assert!((&{Keysym::F11                  }).raw() == 0xFFC8);
    assert!((&{Keysym::F12                  }).raw() == 0xFFC9);
    assert!((&{Keysym::F13                  }).raw() == 0xFFCA);
    assert!((&{Keysym::F14                  }).raw() == 0xFFCB);
    assert!((&{Keysym::F15                  }).raw() == 0xFFCC);
    assert!((&{Keysym::F16                  }).raw() == 0xFFCD);
    assert!((&{Keysym::F17                  }).raw() == 0xFFCE);
    assert!((&{Keysym::F18                  }).raw() == 0xFFCF);
    assert!((&{Keysym::F19                  }).raw() == 0xFFD0);
    assert!((&{Keysym::F2                   }).raw() == 0xFFBF);
    assert!((&{Keysym::F20                  }).raw() == 0xFFD1);
    assert!((&{Keysym::F21                  }).raw() == 0xFFD2);
    assert!((&{Keysym::F22                  }).raw() == 0xFFD3);
    assert!((&{Keysym::F23                  }).raw() == 0xFFD4);
    assert!((&{Keysym::F24                  }).raw() == 0xFFD5);
    assert!((&{Keysym::F3                   }).raw() == 0xFFC0);
    assert!((&{Keysym::F4                   }).raw() == 0xFFC1);
    assert!((&{Keysym::F5                   }).raw() == 0xFFC2);
    assert!((&{Keysym::F6                   }).raw() == 0xFFC3);
    assert!((&{Keysym::F7                   }).raw() == 0xFFC4);
    assert!((&{Keysym::F8                   }).raw() == 0xFFC5);
    assert!((&{Keysym::F9                   }).raw() == 0xFFC6);
    assert!((&{Keysym::G                    }).raw() == 0x47);
    assert!((&{Keysym::H                    }).raw() == 0x48);
    assert!((&{Keysym::Help                 }).raw() == 0xFF6A);
    assert!((&{Keysym::Home                 }).raw() == 0xFF50);
    assert!((&{Keysym::I                    }).raw() == 0x49);
    assert!((&{Keysym::Insert               }).raw() == 0xFF63);
    assert!((&{Keysym::J                    }).raw() == 0x4A);
    assert!((&{Keysym::K                    }).raw() == 0x4B);
    assert!((&{Keysym::L                    }).raw() == 0x4C);
    assert!((&{Keysym::Menu                 }).raw() == 0xFF67);
    assert!((&{Keysym::Alt_L                }).raw() == 0xFFE9);
    assert!((&{Keysym::Left                 }).raw() == 0xFF51);
    assert!((&{Keysym::Control_L            }).raw() == 0xFFE3);
    assert!((&{Keysym::Control_L            }).raw() == 0xFFE3);
    assert!((&{Keysym::Super_L              }).raw() == 0xFFEB);
    assert!((&{Keysym::Shift_L              }).raw() == 0xFFE1);
    assert!((&{Keysym::M                    }).raw() == 0x4D);
    assert!((&{Keysym::N                    }).raw() == 0x4E);
    assert!((&{Keysym::O                    }).raw() == 0x4F);
    assert!((&{Keysym::P                    }).raw() == 0x50);
    assert!((&{Keysym::Page_Down            }).raw() == 0xFF56);
    assert!((&{Keysym::Page_Up              }).raw() == 0xFF55);
    assert!((&{Keysym::Pause                }).raw() == 0xFF13);
    assert!((&{Keysym::Print                }).raw() == 0xFF61);
    assert!((&{Keysym::Q                    }).raw() == 0x51);
    assert!((&{Keysym::R                    }).raw() == 0x52);
    assert!((&{Keysym::Return               }).raw() == 0xFF0D);
    assert!((&{Keysym::Alt_R                }).raw() == 0xFFEA);
    assert!((&{Keysym::Right                }).raw() == 0xFF53);
    assert!((&{Keysym::Control_R            }).raw() == 0xFFE4);
    assert!((&{Keysym::Super_R              }).raw() == 0xFFEC);
    assert!((&{Keysym::Shift_R              }).raw() == 0xFFE2);
    assert!((&{Keysym::S                    }).raw() == 0x53);
    assert!((&{Keysym::Scroll_Lock          }).raw() == 0xFF14);
    assert!((&{Keysym::Select               }).raw() == 0xFF60);
    assert!((&{Keysym::space                }).raw() == 0x20);
    assert!((&{Keysym::T                    }).raw() == 0x54);
    assert!((&{Keysym::Tab                  }).raw() == 0xFF09);
    assert!((&{Keysym::U                    }).raw() == 0x55);
    assert!((&{Keysym::Up                   }).raw() == 0xFF52);
    assert!((&{Keysym::V                    }).raw() == 0x56);
    assert!((&{Keysym::W                    }).raw() == 0x57);
    assert!((&{Keysym::X                    }).raw() == 0x58);
    assert!((&{Keysym::Y                    }).raw() == 0x59);
    assert!((&{Keysym::Z                    }).raw() == 0x5A);
    assert!((&{Keysym::KP_0                 }).raw() == 0xFFB0);
    assert!((&{Keysym::KP_1                 }).raw() == 0xFFB1);
    assert!((&{Keysym::KP_2                 }).raw() == 0xFFB2);
    assert!((&{Keysym::KP_3                 }).raw() == 0xFFB3);
    assert!((&{Keysym::KP_4                 }).raw() == 0xFFB4);
    assert!((&{Keysym::KP_5                 }).raw() == 0xFFB5);
    assert!((&{Keysym::KP_6                 }).raw() == 0xFFB6);
    assert!((&{Keysym::KP_7                 }).raw() == 0xFFB7);
    assert!((&{Keysym::KP_8                 }).raw() == 0xFFB8);
    assert!((&{Keysym::KP_9                 }).raw() == 0xFFB9);
    assert!((&{Keysym::KP_Subtract          }).raw() == 0xFFAD);
    assert!((&{Keysym::KP_Divide            }).raw() == 0xFFAF);
    assert!((&{Keysym::Num_Lock             }).raw() == 0xFF7F);
    assert!((&{Keysym::KP_Decimal           }).raw() == 0xFFAE);
    assert!((&{Keysym::KP_Add               }).raw() == 0xFFAB);
    assert!((&{Keysym::KP_Multiply          }).raw() == 0xFFAA);
    assert!((&{Keysym::F25                  }).raw() == 0xFFD6);
    assert!((&{Keysym::F26                  }).raw() == 0xFFD7);
    assert!((&{Keysym::F27                  }).raw() == 0xFFD8);
    assert!((&{Keysym::F28                  }).raw() == 0xFFD9);
    assert!((&{Keysym::F29                  }).raw() == 0xFFDA);
    assert!((&{Keysym::F30                  }).raw() == 0xFFDB);
    assert!((&{Keysym::F31                  }).raw() == 0xFFDC);
    assert!((&{Keysym::F32                  }).raw() == 0xFFDD);
    assert!((&{Keysym::F33                  }).raw() == 0xFFDE);
    assert!((&{Keysym::F34                  }).raw() == 0xFFDF);
    assert!((&{Keysym::F35                  }).raw() == 0xFFE0);
    assert!((&{Keysym::Begin                }).raw() == 0xFF58);
    assert!((&{Keysym::Break                }).raw() == 0xFF6B);
    assert!((&{Keysym::Find                 }).raw() == 0xFF68);
    assert!((&{Keysym::Linefeed             }).raw() == 0xFF0A);
    assert!((&{Keysym::XF86_AudioMicMute    }).raw() == 0x1008FFB2);
    assert!((&{Keysym::Redo                 }).raw() == 0xFF66);
    assert!((&{Keysym::script_switch        }).raw() == 0xFF7E);
    assert!((&{Keysym::Shift_Lock           }).raw() == 0xFFE6);
    assert!((&{Keysym::Sys_Req              }).raw() == 0xFF15);
    assert!((&{Keysym::Undo                 }).raw() == 0xFF65);
    assert!((&{Keysym::Hangul               }).raw() == 0xFF31);
    assert!((&{Keysym::Kanji                }).raw() == 0xFF21);
    assert!((&{Keysym::Hangul_Hanja         }).raw() == 0xFF34);
    assert!((&{Keysym::Mode_switch          }).raw() == 0xFF7E);
    assert!((&{Keysym::Print                }).raw() == 0xFF61);
  }
  value.raw()
}

impl crate::numeric::AsCode<Keysym> for crate::numeric::Coder {
  type Code = u32;
  fn as_code(value: &Keysym) -> Self::Code {
    keysym_to_u32(value)
  }
  #[allow(unreachable_patterns)]
  fn from_code(code: Self::Code) -> Option<Keysym> {
    match code {
      0x1008FF12 => Some(Keysym::XF86_AudioMute       ),
      0x1008FF14 => Some(Keysym::XF86_AudioPlay       ),
      0x1008FF17 => Some(Keysym::XF86_AudioNext       ),
      0x1008FF16 => Some(Keysym::XF86_AudioPrev       ),
      0x1008FF15 => Some(Keysym::XF86_AudioStop       ),
      0x1008FF11 => Some(Keysym::XF86_AudioLowerVolume),
      0x1008FF13 => Some(Keysym::XF86_AudioRaiseVolume),
      0x30 => Some(Keysym::_0                   ),
      0x31 => Some(Keysym::_1                   ),
      0x32 => Some(Keysym::_2                   ),
      0x33 => Some(Keysym::_3                   ),
      0x34 => Some(Keysym::_4                   ),
      0x35 => Some(Keysym::_5                   ),
      0x36 => Some(Keysym::_6                   ),
      0x37 => Some(Keysym::_7                   ),
      0x38 => Some(Keysym::_8                   ),
      0x39 => Some(Keysym::_9                   ),
      0x41 => Some(Keysym::A                    ),
      0x42 => Some(Keysym::B                    ),
      0x43 => Some(Keysym::C                    ),
      0xFF69 => Some(Keysym::Cancel               ),
      0xFFE5 => Some(Keysym::Caps_Lock            ),
      0xFF0B => Some(Keysym::Clear                ),
      0x44 => Some(Keysym::D                    ),
      0xFF08 => Some(Keysym::BackSpace            ),
      0xFFFF => Some(Keysym::Delete               ),
      0xFF54 => Some(Keysym::Down                 ),
      0x45 => Some(Keysym::E                    ),
      0xFF57 => Some(Keysym::End                  ),
      0xFF1B => Some(Keysym::Escape               ),
      0xFF62 => Some(Keysym::Execute              ),
      0x46 => Some(Keysym::F                    ),
      0xFFBE => Some(Keysym::F1                   ),
      0xFFC7 => Some(Keysym::F10                  ),
      0xFFC8 => Some(Keysym::F11                  ),
      0xFFC9 => Some(Keysym::F12                  ),
      0xFFCA => Some(Keysym::F13                  ),
      0xFFCB => Some(Keysym::F14                  ),
      0xFFCC => Some(Keysym::F15                  ),
      0xFFCD => Some(Keysym::F16                  ),
      0xFFCE => Some(Keysym::F17                  ),
      0xFFCF => Some(Keysym::F18                  ),
      0xFFD0 => Some(Keysym::F19                  ),
      0xFFBF => Some(Keysym::F2                   ),
      0xFFD1 => Some(Keysym::F20                  ),
      0xFFD2 => Some(Keysym::F21                  ),
      0xFFD3 => Some(Keysym::F22                  ),
      0xFFD4 => Some(Keysym::F23                  ),
      0xFFD5 => Some(Keysym::F24                  ),
      0xFFC0 => Some(Keysym::F3                   ),
      0xFFC1 => Some(Keysym::F4                   ),
      0xFFC2 => Some(Keysym::F5                   ),
      0xFFC3 => Some(Keysym::F6                   ),
      0xFFC4 => Some(Keysym::F7                   ),
      0xFFC5 => Some(Keysym::F8                   ),
      0xFFC6 => Some(Keysym::F9                   ),
      0x47 => Some(Keysym::G                    ),
      0x48 => Some(Keysym::H                    ),
      0xFF6A => Some(Keysym::Help                 ),
      0xFF50 => Some(Keysym::Home                 ),
      0x49 => Some(Keysym::I                    ),
      0xFF63 => Some(Keysym::Insert               ),
      0x4A => Some(Keysym::J                    ),
      0x4B => Some(Keysym::K                    ),
      0x4C => Some(Keysym::L                    ),
      0xFF67 => Some(Keysym::Menu                 ),
      0xFFE9 => Some(Keysym::Alt_L                ),
      0xFF51 => Some(Keysym::Left                 ),
      0xFFE3 => Some(Keysym::Control_L            ),
      0xFFEB => Some(Keysym::Super_L              ),
      0xFFE1 => Some(Keysym::Shift_L              ),
      0x4D => Some(Keysym::M                    ),
      0x4E => Some(Keysym::N                    ),
      0x4F => Some(Keysym::O                    ),
      0x50 => Some(Keysym::P                    ),
      0xFF56 => Some(Keysym::Page_Down            ),
      0xFF55 => Some(Keysym::Page_Up              ),
      0xFF13 => Some(Keysym::Pause                ),
      0xFF61 => Some(Keysym::Print                ),
      0x51 => Some(Keysym::Q                    ),
      0x52 => Some(Keysym::R                    ),
      0xFF0D => Some(Keysym::Return               ),
      0xFFEA => Some(Keysym::Alt_R                ),
      0xFF53 => Some(Keysym::Right                ),
      0xFFE4 => Some(Keysym::Control_R            ),
      0xFFEC => Some(Keysym::Super_R              ),
      0xFFE2 => Some(Keysym::Shift_R              ),
      0x53 => Some(Keysym::S                    ),
      0xFF14 => Some(Keysym::Scroll_Lock          ),
      0xFF60 => Some(Keysym::Select               ),
      0x20 => Some(Keysym::space                ),
      0x54 => Some(Keysym::T                    ),
      0xFF09 => Some(Keysym::Tab                  ),
      0x55 => Some(Keysym::U                    ),
      0xFF52 => Some(Keysym::Up                   ),
      0x56 => Some(Keysym::V                    ),
      0x57 => Some(Keysym::W                    ),
      0x58 => Some(Keysym::X                    ),
      0x59 => Some(Keysym::Y                    ),
      0x5A => Some(Keysym::Z                    ),
      0xFFB0 => Some(Keysym::KP_0                 ),
      0xFFB1 => Some(Keysym::KP_1                 ),
      0xFFB2 => Some(Keysym::KP_2                 ),
      0xFFB3 => Some(Keysym::KP_3                 ),
      0xFFB4 => Some(Keysym::KP_4                 ),
      0xFFB5 => Some(Keysym::KP_5                 ),
      0xFFB6 => Some(Keysym::KP_6                 ),
      0xFFB7 => Some(Keysym::KP_7                 ),
      0xFFB8 => Some(Keysym::KP_8                 ),
      0xFFB9 => Some(Keysym::KP_9                 ),
      0xFFAD => Some(Keysym::KP_Subtract          ),
      0xFFAF => Some(Keysym::KP_Divide            ),
      0xFF7F => Some(Keysym::Num_Lock             ),
      0xFFAE => Some(Keysym::KP_Decimal           ),
      0xFFAB => Some(Keysym::KP_Add               ),
      0xFFAA => Some(Keysym::KP_Multiply          ),
      0xFFD6 => Some(Keysym::F25                  ),
      0xFFD7 => Some(Keysym::F26                  ),
      0xFFD8 => Some(Keysym::F27                  ),
      0xFFD9 => Some(Keysym::F28                  ),
      0xFFDA => Some(Keysym::F29                  ),
      0xFFDB => Some(Keysym::F30                  ),
      0xFFDC => Some(Keysym::F31                  ),
      0xFFDD => Some(Keysym::F32                  ),
      0xFFDE => Some(Keysym::F33                  ),
      0xFFDF => Some(Keysym::F34                  ),
      0xFFE0 => Some(Keysym::F35                  ),
      0xFF58 => Some(Keysym::Begin                ),
      0xFF6B => Some(Keysym::Break                ),
      0xFF68 => Some(Keysym::Find                 ),
      0xFF0A => Some(Keysym::Linefeed             ),
      0x1008FFB2 => Some(Keysym::XF86_AudioMicMute    ),
      0xFF66 => Some(Keysym::Redo                 ),
      0xFF7E => Some(Keysym::script_switch        ),
      0xFFE6 => Some(Keysym::Shift_Lock           ),
      0xFF15 => Some(Keysym::Sys_Req              ),
      0xFF65 => Some(Keysym::Undo                 ),
      0xFF31 => Some(Keysym::Hangul               ),
      0xFF21 => Some(Keysym::Kanji                ),
      0xFF34 => Some(Keysym::Hangul_Hanja         ),
      0xFF7E => Some(Keysym::Mode_switch          ),
      _ => None,
    }
  }
  unsafe fn from_code_unchecked(code: Self::Code) -> Keysym {
    Keysym::new(code)
  }
}

