// This file is auto-generated. Do not edit manually.


pub fn make1code_to_u32(value: &Make1Code) -> u32 {
  #[allow(unused_parens)]
  const {
    assert!((&{Make1Code( 0xE06A )}).0 == 0xE06A);
    assert!((&{Make1Code( 0xE066 )}).0 == 0xE066);
    assert!((&{Make1Code( 0xE069 )}).0 == 0xE069);
    assert!((&{Make1Code( 0xE032 )}).0 == 0xE032);
    assert!((&{Make1Code( 0xE067 )}).0 == 0xE067);
    assert!((&{Make1Code( 0xE065 )}).0 == 0xE065);
    assert!((&{Make1Code( 0xE068 )}).0 == 0xE068);
    assert!((&{Make1Code( 0xE06C )}).0 == 0xE06C);
    assert!((&{Make1Code( 0xE06D )}).0 == 0xE06D);
    assert!((&{Make1Code( 0xE020 )}).0 == 0xE020);
    assert!((&{Make1Code( 0xE022 )}).0 == 0xE022);
    assert!((&{Make1Code( 0xE019 )}).0 == 0xE019);
    assert!((&{Make1Code( 0xE010 )}).0 == 0xE010);
    assert!((&{Make1Code( 0xE024 )}).0 == 0xE024);
    assert!((&{Make1Code( 0xE02E )}).0 == 0xE02E);
    assert!((&{Make1Code( 0xE030 )}).0 == 0xE030);
    assert!((&{Make1Code( 0xE05F )}).0 == 0xE05F);
    assert!((&{Make1Code( 0x0B   )}).0 == 0x0B);
    assert!((&{Make1Code( 0x02   )}).0 == 0x02);
    assert!((&{Make1Code( 0x03   )}).0 == 0x03);
    assert!((&{Make1Code( 0x04   )}).0 == 0x04);
    assert!((&{Make1Code( 0x05   )}).0 == 0x05);
    assert!((&{Make1Code( 0x06   )}).0 == 0x06);
    assert!((&{Make1Code( 0x07   )}).0 == 0x07);
    assert!((&{Make1Code( 0x08   )}).0 == 0x08);
    assert!((&{Make1Code( 0x09   )}).0 == 0x09);
    assert!((&{Make1Code( 0x0A   )}).0 == 0x0A);
    assert!((&{Make1Code( 0x1E   )}).0 == 0x1E);
    assert!((&{Make1Code( 0xE05D )}).0 == 0xE05D);
    assert!((&{Make1Code( 0x30   )}).0 == 0x30);
    assert!((&{Make1Code( 0x2B   )}).0 == 0x2B);
    assert!((&{Make1Code( 0x2E   )}).0 == 0x2E);
    assert!((&{Make1Code( 0xE046 )}).0 == 0xE046);
    assert!((&{Make1Code( 0x3A   )}).0 == 0x3A);
    assert!((&{Make1Code( 0x4C   )}).0 == 0x4C);
    assert!((&{Make1Code( 0x33   )}).0 == 0x33);
    assert!((&{Make1Code( 0x20   )}).0 == 0x20);
    assert!((&{Make1Code( 0x0C   )}).0 == 0x0C);
    assert!((&{Make1Code( 0x0E   )}).0 == 0x0E);
    assert!((&{Make1Code( 0x53   )}).0 == 0x53);
    assert!((&{Make1Code( 0x50   )}).0 == 0x50);
    assert!((&{Make1Code( 0x12   )}).0 == 0x12);
    assert!((&{Make1Code( 0x4F   )}).0 == 0x4F);
    assert!((&{Make1Code( 0x0D   )}).0 == 0x0D);
    assert!((&{Make1Code( 0x01   )}).0 == 0x01);
    assert!((&{Make1Code( 0x21   )}).0 == 0x21);
    assert!((&{Make1Code( 0x3B   )}).0 == 0x3B);
    assert!((&{Make1Code( 0x44   )}).0 == 0x44);
    assert!((&{Make1Code( 0x57   )}).0 == 0x57);
    assert!((&{Make1Code( 0x58   )}).0 == 0x58);
    assert!((&{Make1Code( 0x64   )}).0 == 0x64);
    assert!((&{Make1Code( 0x65   )}).0 == 0x65);
    assert!((&{Make1Code( 0x66   )}).0 == 0x66);
    assert!((&{Make1Code( 0x67   )}).0 == 0x67);
    assert!((&{Make1Code( 0x68   )}).0 == 0x68);
    assert!((&{Make1Code( 0x69   )}).0 == 0x69);
    assert!((&{Make1Code( 0x6A   )}).0 == 0x6A);
    assert!((&{Make1Code( 0x3C   )}).0 == 0x3C);
    assert!((&{Make1Code( 0x6B   )}).0 == 0x6B);
    assert!((&{Make1Code( 0x6C   )}).0 == 0x6C);
    assert!((&{Make1Code( 0x6D   )}).0 == 0x6D);
    assert!((&{Make1Code( 0x6E   )}).0 == 0x6E);
    assert!((&{Make1Code( 0x76   )}).0 == 0x76);
    assert!((&{Make1Code( 0x3D   )}).0 == 0x3D);
    assert!((&{Make1Code( 0x3E   )}).0 == 0x3E);
    assert!((&{Make1Code( 0x3F   )}).0 == 0x3F);
    assert!((&{Make1Code( 0x40   )}).0 == 0x40);
    assert!((&{Make1Code( 0x41   )}).0 == 0x41);
    assert!((&{Make1Code( 0x42   )}).0 == 0x42);
    assert!((&{Make1Code( 0x43   )}).0 == 0x43);
    assert!((&{Make1Code( 0x35   )}).0 == 0x35);
    assert!((&{Make1Code( 0x22   )}).0 == 0x22);
    assert!((&{Make1Code( 0x29   )}).0 == 0x29);
    assert!((&{Make1Code( 0x23   )}).0 == 0x23);
    assert!((&{Make1Code( 0x63   )}).0 == 0x63);
    assert!((&{Make1Code( 0x47   )}).0 == 0x47);
    assert!((&{Make1Code( 0x17   )}).0 == 0x17);
    assert!((&{Make1Code( 0x52   )}).0 == 0x52);
    assert!((&{Make1Code( 0x24   )}).0 == 0x24);
    assert!((&{Make1Code( 0x25   )}).0 == 0x25);
    assert!((&{Make1Code( 0x26   )}).0 == 0x26);
    assert!((&{Make1Code( 0x38   )}).0 == 0x38);
    assert!((&{Make1Code( 0x38   )}).0 == 0x38);
    assert!((&{Make1Code( 0x38   )}).0 == 0x38);
    assert!((&{Make1Code( 0x28   )}).0 == 0x28);
    assert!((&{Make1Code( 0x4B   )}).0 == 0x4B);
    assert!((&{Make1Code( 0x1A   )}).0 == 0x1A);
    assert!((&{Make1Code( 0x1D   )}).0 == 0x1D);
    assert!((&{Make1Code( 0x1D   )}).0 == 0x1D);
    assert!((&{Make1Code( 0xE05B )}).0 == 0xE05B);
    assert!((&{Make1Code( 0xE05B )}).0 == 0xE05B);
    assert!((&{Make1Code( 0xE05B )}).0 == 0xE05B);
    assert!((&{Make1Code( 0xE05B )}).0 == 0xE05B);
    assert!((&{Make1Code( 0xE05B )}).0 == 0xE05B);
    assert!((&{Make1Code( 0x2A   )}).0 == 0x2A);
    assert!((&{Make1Code( 0x2A   )}).0 == 0x2A);
    assert!((&{Make1Code( 0x32   )}).0 == 0x32);
    assert!((&{Make1Code( 0x31   )}).0 == 0x31);
    assert!((&{Make1Code( 0x56   )}).0 == 0x56);
    assert!((&{Make1Code( 0x18   )}).0 == 0x18);
    assert!((&{Make1Code( 0x19   )}).0 == 0x19);
    assert!((&{Make1Code( 0x51   )}).0 == 0x51);
    assert!((&{Make1Code( 0x49   )}).0 == 0x49);
    assert!((&{Make1Code( 0xE11D )}).0 == 0xE11D);
    assert!((&{Make1Code( 0x34   )}).0 == 0x34);
    assert!((&{Make1Code( 0x54   )}).0 == 0x54);
    assert!((&{Make1Code( 0x54   )}).0 == 0x54);
    assert!((&{Make1Code( 0x10   )}).0 == 0x10);
    assert!((&{Make1Code( 0x13   )}).0 == 0x13);
    assert!((&{Make1Code( 0x1C   )}).0 == 0x1C);
    assert!((&{Make1Code( 0xE038 )}).0 == 0xE038);
    assert!((&{Make1Code( 0xE038 )}).0 == 0xE038);
    assert!((&{Make1Code( 0x4D   )}).0 == 0x4D);
    assert!((&{Make1Code( 0x1B   )}).0 == 0x1B);
    assert!((&{Make1Code( 0xE01D )}).0 == 0xE01D);
    assert!((&{Make1Code( 0xE05C )}).0 == 0xE05C);
    assert!((&{Make1Code( 0xE05C )}).0 == 0xE05C);
    assert!((&{Make1Code( 0x36   )}).0 == 0x36);
    assert!((&{Make1Code( 0x1F   )}).0 == 0x1F);
    assert!((&{Make1Code( 0x46   )}).0 == 0x46);
    assert!((&{Make1Code( 0x46   )}).0 == 0x46);
    assert!((&{Make1Code( 0x27   )}).0 == 0x27);
    assert!((&{Make1Code( 0x39   )}).0 == 0x39);
    assert!((&{Make1Code( 0x14   )}).0 == 0x14);
    assert!((&{Make1Code( 0x0F   )}).0 == 0x0F);
    assert!((&{Make1Code( 0x16   )}).0 == 0x16);
    assert!((&{Make1Code( 0x48   )}).0 == 0x48);
    assert!((&{Make1Code( 0x2F   )}).0 == 0x2F);
    assert!((&{Make1Code( 0x11   )}).0 == 0x11);
    assert!((&{Make1Code( 0x2D   )}).0 == 0x2D);
    assert!((&{Make1Code( 0x15   )}).0 == 0x15);
    assert!((&{Make1Code( 0x2C   )}).0 == 0x2C);
    assert!((&{Make1Code( 0x52   )}).0 == 0x52);
    assert!((&{Make1Code( 0x4F   )}).0 == 0x4F);
    assert!((&{Make1Code( 0x50   )}).0 == 0x50);
    assert!((&{Make1Code( 0x51   )}).0 == 0x51);
    assert!((&{Make1Code( 0x4B   )}).0 == 0x4B);
    assert!((&{Make1Code( 0x4C   )}).0 == 0x4C);
    assert!((&{Make1Code( 0x4D   )}).0 == 0x4D);
    assert!((&{Make1Code( 0x47   )}).0 == 0x47);
    assert!((&{Make1Code( 0x48   )}).0 == 0x48);
    assert!((&{Make1Code( 0x49   )}).0 == 0x49);
    assert!((&{Make1Code( 0x4A   )}).0 == 0x4A);
    assert!((&{Make1Code( 0xE035 )}).0 == 0xE035);
    assert!((&{Make1Code( 0x45   )}).0 == 0x45);
    assert!((&{Make1Code( 0x53   )}).0 == 0x53);
    assert!((&{Make1Code( 0x4E   )}).0 == 0x4E);
    assert!((&{Make1Code( 0x37   )}).0 == 0x37);
    assert!((&{Make1Code( 0x73   )}).0 == 0x73);
    assert!((&{Make1Code( 0x7E   )}).0 == 0x7E);
    assert!((&{Make1Code( 0x5D   )}).0 == 0x5D);
    assert!((&{Make1Code( 0x5B   )}).0 == 0x5B);
    assert!((&{Make1Code( 0x62   )}).0 == 0x62);
    assert!((&{Make1Code( 0x5E   )}).0 == 0x5E);
    assert!((&{Make1Code( 0x5F   )}).0 == 0x5F);
    assert!((&{Make1Code( 0x5D   )}).0 == 0x5D);
    assert!((&{Make1Code( 0x5F   )}).0 == 0x5F);
    assert!((&{Make1Code( 0x5E   )}).0 == 0x5E);
    assert!((&{Make1Code( 0x5B   )}).0 == 0x5B);
    assert!((&{Make1Code( 0x5C   )}).0 == 0x5C);
    assert!((&{Make1Code( 0x7B   )}).0 == 0x7B);
    assert!((&{Make1Code( 0x6F   )}).0 == 0x6F);
    assert!((&{Make1Code( 0x71   )}).0 == 0x71);
    assert!((&{Make1Code( 0x5A   )}).0 == 0x5A);
    assert!((&{Make1Code( 0x62   )}).0 == 0x62);
    assert!((&{Make1Code( 0xE06B )}).0 == 0xE06B);
    assert!((&{Make1Code( 0xE021 )}).0 == 0xE021);
  }
  value.0
}

impl crate::numeric::AsCode<Make1Code> for crate::numeric::Coder {
  type Code = u32;
  fn as_code(value: &Make1Code) -> Self::Code {
    make1code_to_u32(value)
  }
  #[allow(unreachable_patterns)]
  fn from_code(code: Self::Code) -> Option<Make1Code> {
    match code {
      0xE06A => Some(Make1Code( 0xE06A )),
      0xE066 => Some(Make1Code( 0xE066 )),
      0xE069 => Some(Make1Code( 0xE069 )),
      0xE032 => Some(Make1Code( 0xE032 )),
      0xE067 => Some(Make1Code( 0xE067 )),
      0xE065 => Some(Make1Code( 0xE065 )),
      0xE068 => Some(Make1Code( 0xE068 )),
      0xE06C => Some(Make1Code( 0xE06C )),
      0xE06D => Some(Make1Code( 0xE06D )),
      0xE020 => Some(Make1Code( 0xE020 )),
      0xE022 => Some(Make1Code( 0xE022 )),
      0xE019 => Some(Make1Code( 0xE019 )),
      0xE010 => Some(Make1Code( 0xE010 )),
      0xE024 => Some(Make1Code( 0xE024 )),
      0xE02E => Some(Make1Code( 0xE02E )),
      0xE030 => Some(Make1Code( 0xE030 )),
      0xE05F => Some(Make1Code( 0xE05F )),
      0x0B => Some(Make1Code( 0x0B   )),
      0x02 => Some(Make1Code( 0x02   )),
      0x03 => Some(Make1Code( 0x03   )),
      0x04 => Some(Make1Code( 0x04   )),
      0x05 => Some(Make1Code( 0x05   )),
      0x06 => Some(Make1Code( 0x06   )),
      0x07 => Some(Make1Code( 0x07   )),
      0x08 => Some(Make1Code( 0x08   )),
      0x09 => Some(Make1Code( 0x09   )),
      0x0A => Some(Make1Code( 0x0A   )),
      0x1E => Some(Make1Code( 0x1E   )),
      0xE05D => Some(Make1Code( 0xE05D )),
      0x30 => Some(Make1Code( 0x30   )),
      0x2B => Some(Make1Code( 0x2B   )),
      0x2E => Some(Make1Code( 0x2E   )),
      0xE046 => Some(Make1Code( 0xE046 )),
      0x3A => Some(Make1Code( 0x3A   )),
      0x4C => Some(Make1Code( 0x4C   )),
      0x33 => Some(Make1Code( 0x33   )),
      0x20 => Some(Make1Code( 0x20   )),
      0x0C => Some(Make1Code( 0x0C   )),
      0x0E => Some(Make1Code( 0x0E   )),
      0x53 => Some(Make1Code( 0x53   )),
      0x50 => Some(Make1Code( 0x50   )),
      0x12 => Some(Make1Code( 0x12   )),
      0x4F => Some(Make1Code( 0x4F   )),
      0x0D => Some(Make1Code( 0x0D   )),
      0x01 => Some(Make1Code( 0x01   )),
      0x21 => Some(Make1Code( 0x21   )),
      0x3B => Some(Make1Code( 0x3B   )),
      0x44 => Some(Make1Code( 0x44   )),
      0x57 => Some(Make1Code( 0x57   )),
      0x58 => Some(Make1Code( 0x58   )),
      0x64 => Some(Make1Code( 0x64   )),
      0x65 => Some(Make1Code( 0x65   )),
      0x66 => Some(Make1Code( 0x66   )),
      0x67 => Some(Make1Code( 0x67   )),
      0x68 => Some(Make1Code( 0x68   )),
      0x69 => Some(Make1Code( 0x69   )),
      0x6A => Some(Make1Code( 0x6A   )),
      0x3C => Some(Make1Code( 0x3C   )),
      0x6B => Some(Make1Code( 0x6B   )),
      0x6C => Some(Make1Code( 0x6C   )),
      0x6D => Some(Make1Code( 0x6D   )),
      0x6E => Some(Make1Code( 0x6E   )),
      0x76 => Some(Make1Code( 0x76   )),
      0x3D => Some(Make1Code( 0x3D   )),
      0x3E => Some(Make1Code( 0x3E   )),
      0x3F => Some(Make1Code( 0x3F   )),
      0x40 => Some(Make1Code( 0x40   )),
      0x41 => Some(Make1Code( 0x41   )),
      0x42 => Some(Make1Code( 0x42   )),
      0x43 => Some(Make1Code( 0x43   )),
      0x35 => Some(Make1Code( 0x35   )),
      0x22 => Some(Make1Code( 0x22   )),
      0x29 => Some(Make1Code( 0x29   )),
      0x23 => Some(Make1Code( 0x23   )),
      0x63 => Some(Make1Code( 0x63   )),
      0x47 => Some(Make1Code( 0x47   )),
      0x17 => Some(Make1Code( 0x17   )),
      0x52 => Some(Make1Code( 0x52   )),
      0x24 => Some(Make1Code( 0x24   )),
      0x25 => Some(Make1Code( 0x25   )),
      0x26 => Some(Make1Code( 0x26   )),
      0x38 => Some(Make1Code( 0x38   )),
      0x28 => Some(Make1Code( 0x28   )),
      0x4B => Some(Make1Code( 0x4B   )),
      0x1A => Some(Make1Code( 0x1A   )),
      0x1D => Some(Make1Code( 0x1D   )),
      0xE05B => Some(Make1Code( 0xE05B )),
      0x2A => Some(Make1Code( 0x2A   )),
      0x32 => Some(Make1Code( 0x32   )),
      0x31 => Some(Make1Code( 0x31   )),
      0x56 => Some(Make1Code( 0x56   )),
      0x18 => Some(Make1Code( 0x18   )),
      0x19 => Some(Make1Code( 0x19   )),
      0x51 => Some(Make1Code( 0x51   )),
      0x49 => Some(Make1Code( 0x49   )),
      0xE11D => Some(Make1Code( 0xE11D )),
      0x34 => Some(Make1Code( 0x34   )),
      0x54 => Some(Make1Code( 0x54   )),
      0x10 => Some(Make1Code( 0x10   )),
      0x13 => Some(Make1Code( 0x13   )),
      0x1C => Some(Make1Code( 0x1C   )),
      0xE038 => Some(Make1Code( 0xE038 )),
      0x4D => Some(Make1Code( 0x4D   )),
      0x1B => Some(Make1Code( 0x1B   )),
      0xE01D => Some(Make1Code( 0xE01D )),
      0xE05C => Some(Make1Code( 0xE05C )),
      0x36 => Some(Make1Code( 0x36   )),
      0x1F => Some(Make1Code( 0x1F   )),
      0x46 => Some(Make1Code( 0x46   )),
      0x27 => Some(Make1Code( 0x27   )),
      0x39 => Some(Make1Code( 0x39   )),
      0x14 => Some(Make1Code( 0x14   )),
      0x0F => Some(Make1Code( 0x0F   )),
      0x16 => Some(Make1Code( 0x16   )),
      0x48 => Some(Make1Code( 0x48   )),
      0x2F => Some(Make1Code( 0x2F   )),
      0x11 => Some(Make1Code( 0x11   )),
      0x2D => Some(Make1Code( 0x2D   )),
      0x15 => Some(Make1Code( 0x15   )),
      0x2C => Some(Make1Code( 0x2C   )),
      0x4A => Some(Make1Code( 0x4A   )),
      0xE035 => Some(Make1Code( 0xE035 )),
      0x45 => Some(Make1Code( 0x45   )),
      0x4E => Some(Make1Code( 0x4E   )),
      0x37 => Some(Make1Code( 0x37   )),
      0x73 => Some(Make1Code( 0x73   )),
      0x7E => Some(Make1Code( 0x7E   )),
      0x5D => Some(Make1Code( 0x5D   )),
      0x5B => Some(Make1Code( 0x5B   )),
      0x62 => Some(Make1Code( 0x62   )),
      0x5E => Some(Make1Code( 0x5E   )),
      0x5F => Some(Make1Code( 0x5F   )),
      0x5C => Some(Make1Code( 0x5C   )),
      0x7B => Some(Make1Code( 0x7B   )),
      0x6F => Some(Make1Code( 0x6F   )),
      0x71 => Some(Make1Code( 0x71   )),
      0x5A => Some(Make1Code( 0x5A   )),
      0xE06B => Some(Make1Code( 0xE06B )),
      0xE021 => Some(Make1Code( 0xE021 )),
      _ => None,
    }
  }
  unsafe fn from_code_unchecked(code: Self::Code) -> Make1Code {
    Make1Code(code)
  }
}

